# .github/workflows/build-wheels.yml
name: Build and Package Wheels

on:
  pull_request:
  push:

env:
  LIBRDKAFKA_VERSION: v2.11.0.1

jobs:

  build-linux:
    name: Build wheels for Linux ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: x64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    env:
      OS_NAME: linux
      ARCH: ${{ matrix.arch }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        run: |
          ./tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ env.OS_NAME }}-${{ env.ARCH }}
          path: wheelhouse/confluent_kafka*.whl

  build-windows:
    name: Build wheels for Windows
    runs-on: windows-latest
    env:
      OS_NAME: windows
      ARCH: x64
      CHERE_INVOKING: yes
      MSYSTEM: UCRT64
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
      - name: Build wheels
        shell: bash
        run: |
          ./tools/mingw-w64/msys2-dependencies.sh
          bash tools/mingw-w64/semaphore_commands.sh
          bash tools/wheels/install-librdkafka.sh ${LIBRDKAFKA_VERSION#v} dest
          tools/wheels/build-wheels.bat x64 win_amd64 dest wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ env.OS_NAME }}-${{ env.ARCH }}
          path: wheelhouse/confluent_kafka*.whl

  create_release_artifacts:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    name: Create release artifacts
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - name: Check version consistency
        run: |
          tag_version=${GITHUB_REF/refs\/tags\/v/}
          proj_version=$(uv run --no-project --with poetry poetry version -s)
          if [ "$tag_version" != "$proj_version" ]; then
            echo "::error title=Version mismatch::Tag version \"$tag_version\" does not match project version \"$proj_version\"."
            exit 1
          fi
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: wheels-*
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/confluent_kafka*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_simple_package_index:
    name: Build&publish a PyPI-compatible package index
    runs-on: ubuntu-latest
    needs: [create_release_artifacts]
    if: always() && !failure() && !cancelled() && (github.event_name == 'push')
    concurrency:
      group: simple_package_index
      cancel-in-progress: true
    permissions:
      contents: write
      actions: read
      packages: read
      pages: write
      id-token: write
    steps:    
      - uses: actions/checkout@v2
      - name: Generate Package Index
        run: |        
          python -m pip install --upgrade pip
          pip install PyGithub
          python .github/scripts/generate_index.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OUTPUT_DIR: dist

      - name: Upload Site Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Display GitHub Pages URL
        run: |
          echo "Package Index URL: ${{ steps.deployment.outputs.page_url }}"
